{"version":3,"sources":["util.js","components/Products.js","components/Filter.js","components/Basket.js","App.js","serviceWorker.js","index.js"],"names":["util","num","Number","toFixed","toLocaleString","Products","_this","this","productItems","props","products","map","product","react_default","a","createElement","className","key","id","href","concat","onClick","e","handleAddToCart","src","sku","alt","title","price","Component","count","value","sort","onChange","handleSortChange","size","handleSizeChange","Basket","cartItems","length","style","marginLeft","item","float","handleRemoveFromCart","reduce","c","alert","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","state","filter","localStorage","setItem","JSON","stringify","productAlreadyInCart","forEach","cp","push","objectSpread","listProducts","b","filteredProducts","availableSizes","indexOf","toUpperCase","target","_this2","getItem","parse","fetch","then","res","json","catch","err","data","Filter_Products","Products_Products","Basket_Basket","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.023feea3.chunk.js","sourcesContent":["export default {\r\n    formatCurrency: function (num) {\r\n        return '$' + Number(num.toFixed(1)).toLocaleString() + ' ';\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport util from '../util'\r\nexport default class Products extends Component {\r\n\r\n    render() {\r\n        const productItems = this.props.products.map(product => (\r\n            <div className=\"col-md-4\" key={product.id}>\r\n                <div className=\"thumbnail text-center\">\r\n                    <a href={`#${product.id}`}onClick={(e)=>this.props.handleAddToCart(e, product)}>\r\n                        <img src={`products/${product.sku}_2.jpg`} alt={product.title} />\r\n                        <p>{product.title}</p>                        \r\n                    </a>\r\n                    <b>{util.formatCurrency(product.price)}</b>\r\n                    <button className=\"btn btn-primary\" onClick={(e)=>this.props.handleAddToCart(e, product)}>Add to cart</button>\r\n                </div>\r\n            </div>\r\n        ));\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                {productItems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nexport default class Products extends Component {\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    {`${this.props.count} products found.`}\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <label>Order by\r\n               <select className=\"form-control\" value={this.props.sort} onChange={this.props.handleSortChange}>\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"lowestprice\">Lowest to highest</option>\r\n                            <option value=\"highestprice\">Highest to lowest</option>\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <label > Filter Size\r\n               <select className=\"form-control\" value={this.props.size} onChange={this.props.handleSizeChange}>\r\n                            <option value=\"\">ALL</option>\r\n                            <option value=\"x\">XS</option>\r\n                            <option value=\"s\">S</option>\r\n                            <option value=\"m\">M</option>\r\n                            <option value=\"l\">L</option>\r\n                            <option value=\"xl\">XL</option>\r\n                            <option value=\"xxl\">XXL</option>\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport util from '../util'\r\nexport default class Basket extends Component {\r\n    render() {\r\n        const { cartItems } = this.props;\r\n\r\n        return (\r\n            <div className=\"alert alert-info\">\r\n                {cartItems.length === 0\r\n                    ? \"Basket is empty\" :\r\n                    <div>You have {cartItems.length} items in the basket. <hr /></div>\r\n                }\r\n                {cartItems.length > 0 &&\r\n                    <div>\r\n                        <ul style={{ marginLeft: -25 }}>\r\n                            {cartItems.map(item => (\r\n                                <li key={item.id}>\r\n                                    <b>{item.title}</b>\r\n                                    <button style={{ float: 'right' }} className=\"btn btn-danger btn-xs\"\r\n                                        onClick={(e) => this.props.handleRemoveFromCart(e, item)}>X</button>\r\n                                    <br />\r\n                                    {item.count} X {util.formatCurrency(item.price)}\r\n                                </li>))\r\n                            }\r\n                        </ul>\r\n\r\n                        <b>Sum: {util.formatCurrency(cartItems.reduce((a, c) => (a + c.price * c.count), 0))}\r\n                        </b>\r\n                        <button onClick={() => alert('Todo: Implement checkout page.')} className=\"btn btn-primary\">checkout</button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Products from './components/Products';\r\nimport Filter from './components/Filter';\r\nimport Basket from './components/Basket';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { size: '', sort: '', cartItems: [], products: [], filteredProducts: [] };\r\n  }\r\n  componentWillMount() {\r\n\r\n    if (localStorage.getItem('cartItems')) {\r\n      this.setState({ cartItems: JSON.parse(localStorage.getItem('cartItems')) });\r\n    }\r\n\r\n    fetch('http://localhost:8000/products').then(res => res.json())\r\n      .catch(err => fetch('db.json').then(res => res.json()).then(data => data.products))\r\n      .then(data => {\r\n        this.setState({ products: data });\r\n        this.listProducts();\r\n      });\r\n  }\r\n\r\n  handleRemoveFromCart = (e, product) => {\r\n    this.setState(state => {\r\n      const cartItems = state.cartItems.filter(a => a.id !== product.id);\r\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n      return { cartItems: cartItems };\r\n    })\r\n  }\r\n\r\n  handleAddToCart = (e, product) => {\r\n    this.setState(state => {\r\n      const cartItems = state.cartItems;\r\n      let productAlreadyInCart = false;\r\n\r\n      cartItems.forEach(cp => {\r\n        if (cp.id === product.id) {\r\n          cp.count += 1;\r\n          productAlreadyInCart = true;\r\n        }\r\n      });\r\n\r\n      if (!productAlreadyInCart) {\r\n        cartItems.push({ ...product, count: 1 });\r\n      }\r\n      localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n      return { cartItems: cartItems };\r\n    });\r\n  }\r\n\r\n  listProducts = () => {\r\n    this.setState(state => {\r\n      if (state.sort !== '') {\r\n        state.products.sort((a, b) =>\r\n          (state.sort === 'lowestprice'\r\n            ? ((a.price > b.price) ? 1 : -1)\r\n            : ((a.price < b.price) ? 1 : -1)));\r\n      } else {\r\n        state.products.sort((a, b) => (a.id > b.id) ? 1 : -1);\r\n      }\r\n      if (state.size !== '') {\r\n        return { filteredProducts: state.products.filter(a => a.availableSizes.indexOf(state.size.toUpperCase()) >= 0) };\r\n      }\r\n      return { filteredProducts: state.products };\r\n    })\r\n  }\r\n  handleSortChange = (e) => {\r\n    this.setState({ sort: e.target.value });\r\n    this.listProducts();\r\n  }\r\n  handleSizeChange = (e) => {\r\n    this.setState({ size: e.target.value });\r\n    this.listProducts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>E-commerce Shopping Cart Application</h1>\r\n        <hr />\r\n        <div className=\"row\">\r\n          <div className=\"col-md-9\">\r\n            <Filter count={this.state.filteredProducts.length} handleSortChange={this.handleSortChange}\r\n              handleSizeChange={this.handleSizeChange} />\r\n            <hr />\r\n            <Products products={this.state.filteredProducts} handleAddToCart={this.handleAddToCart} />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <Basket cartItems={this.state.cartItems} handleRemoveFromCart={this.handleRemoveFromCart} />\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}